#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>
//test
&lt {
    tapping-term-ms = <240>;
    flavor = "tap-preferred";
    quick-tap-ms = <150>;
    require-prior-idle-ms = <10>;
};

&mt {
    tapping-term-ms = <250>;
    flavor = "tap-preferred";
    require-prior-idle-ms = <250>;
};

/ {
    chosen { zmk,matrix_transform = &five_column_transform; };
};

/ {
    combos {
        compatible = "zmk,combos";

        LeftClickRight {
            bindings = <&mkp LCLK>;
            key-positions = <16 17>;
        };

        RightClickRight {
            bindings = <&mkp RCLK>;
            key-positions = <17 18>;
        };

        scroll {
            bindings = <&mo 5>;
            key-positions = <16 17 18>;
        };
    };

    behaviors {
        Shift_Enter: Shift_Enter {
            compatible = "zmk,behavior-hold-tap";
            label = "SHIFT_ENTER";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <34>;
            tapping-term-ms = <100>;
        };
    };

    macros {
        quicker: quicker {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_CONTROL &kp LCTRL>, <&macro_press>;

            label = "QUICKER";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        QWERT {
            bindings = <
  &kp Q           &kp W           &kp E        &kp R             &kp T        &kp Y      &kp U              &kp I        &kp O            &kp P
  &mt LEFT_WIN A  &mt LEFT_ALT S  &mt LCTRL D  &mt LEFT_SHIFT F  &kp G        &kp H      &mt RIGHT_SHIFT J  &mt RCTRL K  &mt RIGHT_ALT L  &mt RIGHT_WIN SQT
  &lt 5 Z         &kp X           &kp C        &kp V             &kp B        &kp N      &kp M              &kp COMMA    &kp DOT          &kp SLASH
                                  &mo 6        &lt 2 SPACE       &lt 1 TAB    &kp ENTER  &lt 4 BACKSPACE
            >;
        };

        NAV {
            bindings = <
  &kp LA(F4)  &kp LG(UP_ARROW)  &kp LG(LEFT)     &kp LG(RIGHT)        &kp LC(W)    &kp PRINTSCREEN  &kp BACKSPACE     &kp ENTER          &kp DELETE    &trans
  &kp LC(Z)   &kp RC(RS(T))     &kp LS(LC(TAB))  &kp LC(TAB)          &kp LC(A)    &kp ENTER        &kp LEFT          &kp DOWN           &kp UP_ARROW  &kp RIGHT
  &kp LC(Z)   &kp LC(X)         &kp LC(C)        &mt LC(LS(V)) LC(V)  &kp LC(Y)    &trans           &kp LC(LS(LEFT))  &kp LS(LC(RIGHT))  &trans        &trans
                                &trans           &trans               &trans       &lt 3 BACKSPACE  &kp LSHFT
            >;
        };

        NUM {
            bindings = <
  &kp N1    &kp N2          &kp N3        &kp N4          &kp N5       &kp N6  &kp N7  &kp N8  &kp N9  &kp N0
  &kp LEFT  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT       &quicker     &none   &trans  &trans  &trans  &trans
  &none     &none           &none         &none           &none        &none   &none   &none   &none   &none
                            &trans        &kp LEFT_SHIFT  &lt 3 TAB    &trans  &trans
            >;
        };

        FUN {
            bindings = <
  &kp ESC  &kp F1  &kp F2  &kp F3  &kp F10    &bt BT_SEL 0  &bt BT_SEL 1      &bt BT_SEL 2       &bt BT_SEL 3     &bt BT_SEL 4
  &kp F12  &kp F4  &kp F5  &kp F6  &kp F11    &out OUT_TOG  &kp K_PLAY_PAUSE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &bt BT_CLR
  &trans   &kp F7  &kp F8  &kp F9  &kp F12    &trans        &trans            &trans             &trans           &trans
                   &trans  &trans  &trans     &trans        &trans
            >;
        };

        SYM {
            bindings = <
  &kp EXCLAMATION  &kp AT_SIGN  &kp HASH  &kp DOLLAR  &kp PERCENT    &kp CARET  &kp AMPERSAND   &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
  &trans           &trans       &trans    &trans      &none          &none      &kp MINUS       &kp EQUAL     &kp SEMICOLON         &kp BACKSLASH
  &none            &none        &none     &none       &none          &none      &kp UNDERSCORE  &kp PLUS      &kp LEFT_BRACKET      &kp RIGHT_BRACKET
                                &trans    &trans      &trans         &trans     &trans
            >;
        };

        SCROLL {
            bindings = <
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                  &trans  &trans  &trans    &trans  &trans
            >;
        };

        MSNIPE {
            bindings = <
  &trans  &trans  &trans     &trans     &trans       &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans     &trans     &trans       &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans     &trans     &trans       &trans  &trans  &trans  &trans  &trans
                  &mkp RCLK  &mkp LCLK  &mkp MCLK    &trans  &trans
            >;
        };
    };
};
